<%- include('partials/header') %>

<div class="dashboard-container">
  <!-- Welcome Section -->
  <div class="welcome-section">
    <h1>Welcome back, <%= locals.user ? locals.user.name : 'User' %></h1>
    <p class="text-muted">Here's what's happening with your store today.</p>
  </div>

  <!-- Quick Actions -->
  <div class="quick-actions mb-4">
    <button class="action-btn" data-bs-toggle="modal" data-bs-target="#addSaleModal">
      <i class='bx bx-plus-circle'></i>
      <span>New Sale</span>
    </button>
    <button class="action-btn" data-bs-toggle="modal" data-bs-target="#addProductModal">
      <i class='bx bx-package'></i>
      <span>Add Product</span>
    </button>
    <button class="action-btn" data-bs-toggle="modal" data-bs-target="#updateStockModal">
      <i class='bx bx-refresh'></i>
      <span>Update Stock</span>
    </button>
    <button class="action-btn" onclick="generateReport()">
      <i class='bx bx-file'></i>
      <span>Reports</span>
    </button>
  </div>

  <!-- Statistics Cards -->
  <div class="stats-grid">
    <div class="stat-card">
      <div class="stat-content">
        <i class='bx bxs-shopping-bag'></i>
        <div class="stat-info">
          <h3>Products</h3>
          <h2><%= stats.totalProducts || 0 %></h2>
          <p class="text-muted">Total Products</p>
        </div>
      </div>
    </div>

    <div class="stat-card">
      <div class="stat-content">
        <i class='bx bxs-box'></i>
        <div class="stat-info">
          <h3>Stock</h3>
          <h2><%= stats.totalStock || 0 %></h2>
          <p class="text-muted">Items in Stock</p>
        </div>
      </div>
    </div>

    <div class="stat-card">
      <div class="stat-content">
        <i class='bx bxs-cart'></i>
        <div class="stat-info">
          <h3>Sales</h3>
          <h2><%= stats.totalSales || 0 %></h2>
          <p class="text-muted">Total Sales</p>
        </div>
      </div>
    </div>

    <div class="stat-card">
      <div class="stat-content">
        <i class='bx bx-dollar'></i>
        <div class="stat-info">
          <h3>Revenue</h3>
          <h2>$<%= (stats.totalRevenue || 0).toLocaleString('en-US', { minimumFractionDigits: 2 }) %></h2>
          <p class="text-muted">Total Revenue</p>
        </div>
      </div>
    </div>
  </div>

  <!-- Data Management Section -->
  <div class="data-management-section">
    <!-- Products Table -->
    <div class="dashboard-card">
      <div class="card-header">
        <h3>Products Management</h3>
        <button class="btn-primary" data-bs-toggle="modal" data-bs-target="#addProductModal">
          <i class='bx bx-plus'></i> Add Product
        </button>
      </div>
      <div class="card-body">
        <div class="table-responsive">
          <table class="table">
            <thead>
              <tr>
                <th>Name</th>
                <th>Category</th>
                <th>Price</th>
                <th>Stock</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody id="productsTableBody">
              <% if (products && products.length > 0) { %>
                <% products.forEach(product => { %>
                  <tr data-id="<%= product.id %>">
                    <td><%= product.name %></td>
                    <td><%= product.category %></td>
                    <td>$<%= parseFloat(product.price).toFixed(2) %></td>
                    <td><%= product.stock %></td>
                    <td>
                      <button class="btn-icon" onclick="editProduct('<%= product.id %>')">
                        <i class='bx bx-edit'></i>
                      </button>
                      <button class="btn-icon" onclick="deleteProduct('<%= product.id %>')">
                        <i class='bx bx-trash'></i>
                      </button>
                    </td>
                  </tr>
                <% }); %>
              <% } else { %>
                <tr>
                  <td colspan="5" class="text-center">No products found</td>
                </tr>
              <% } %>
            </tbody>
          </table>
        </div>
      </div>
    </div>

    <!-- Sales Table -->
    <div class="dashboard-card">
      <div class="card-header">
        <h3>Recent Sales</h3>
        <button class="btn-primary" data-bs-toggle="modal" data-bs-target="#addSaleModal">
          <i class='bx bx-plus'></i> New Sale
        </button>
      </div>
      <div class="card-body">
        <div class="table-responsive">
          <table class="table">
            <thead>
              <tr>
                <th>Product</th>
                <th>Quantity</th>
                <th>Total Amount</th>
                <th>Date</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody id="salesTableBody">
              <% if (recentSales && recentSales.length > 0) { %>
                <% recentSales.forEach(sale => { %>
                  <tr data-id="<%= sale.id %>">
                    <td><%= sale.product_name %></td>
                    <td><%= sale.quantity %></td>
                    <td>$<%= sale.total_amount.toFixed(2) %></td>
                    <td><%= new Date(sale.created_at).toLocaleDateString() %></td>
                    <td>
                      <button class="btn-icon" onclick="viewSale('<%= sale.id %>')">
                        <i class='bx bx-show'></i>
                      </button>
                      <button class="btn-icon" onclick="deleteSale('<%= sale.id %>')">
                        <i class='bx bx-trash'></i>
                      </button>
                    </td>
                  </tr>
                <% }); %>
              <% } else { %>
                <tr>
                  <td colspan="5" class="text-center">No sales found</td>
                </tr>
              <% } %>
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>

  <!-- Charts Section -->
  <div class="charts-section">
    <div class="chart-card sales-chart">
      <div class="card-header">
        <h3>Sales Overview</h3>
        <div class="chart-actions">
          <button class="chart-period active">Day</button>
          <button class="chart-period">Week</button>
          <button class="chart-period">Month</button>
        </div>
      </div>
      <div class="card-body">
        <canvas id="salesChart"></canvas>
      </div>
    </div>

    <div class="chart-card category-chart">
      <div class="card-header">
        <h3>Product Categories</h3>
      </div>
      <div class="card-body">
        <canvas id="categoryChart"></canvas>
      </div>
    </div>
  </div>

  <!-- Activity Feed -->
  <div class="dashboard-grid">
    <div class="dashboard-card activity-card">
      <div class="card-header">
        <h3>Recent Activity</h3>
        <button class="refresh-btn">
          <i class='bx bx-refresh'></i>
        </button>
      </div>
      <div class="card-body">
        <div class="activity-list">
          <% if (recentActivity && recentActivity.length > 0) { %>
            <% recentActivity.forEach(activity => { %>
              <div class="activity-item">
                <div class="activity-icon <%= activity.type %>">
                  <i class='bx <%= activity.type === "sale" ? "bxs-cart" : "bxs-box" %>'></i>
                </div>
                <div class="activity-details">
                  <p class="activity-description"><%= activity.description %></p>
                  <p class="activity-date"><%= new Date(activity.date).toLocaleDateString('en-US', { 
                    year: 'numeric', 
                    month: 'short', 
                    day: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                  }) %></p>
                </div>
                <div class="activity-status <%= activity.status %>">
                  <%= activity.status %>
                </div>
              </div>
            <% }); %>
          <% } else { %>
            <p class="no-data">No recent activity</p>
          <% } %>
        </div>
      </div>
    </div>

    <!-- Low Stock Alert -->
    <div class="dashboard-card stock-alert-card">
      <div class="card-header">
        <h3>Low Stock Alert</h3>
      </div>
      <div class="card-body">
        <% if (lowStockItems && lowStockItems.length > 0) { %>
          <div class="low-stock-list">
            <% lowStockItems.forEach(item => { %>
              <div class="low-stock-item">
                <div class="item-details">
                  <h4><%= item.name %></h4>
                  <p class="stock-count <%= item.stock <= 5 ? 'critical' : 'warning' %>">
                    <%= item.stock %> items left
                  </p>
                </div>
                <button class="restock-btn">
                  <i class='bx bx-plus'></i>
                  Restock
                </button>
              </div>
            <% }); %>
          </div>
        <% } else { %>
          <p class="no-data">No low stock items</p>
        <% } %>
      </div>
    </div>
  </div>
</div>

<!-- Add Product Modal -->
<div class="modal fade" id="addProductModal" tabindex="-1">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Add New Product</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <form id="addProductForm">
          <div class="form-group">
            <label for="productName">Product Name</label>
            <input type="text" class="form-control" id="productName" required>
          </div>
          <div class="form-group">
            <label for="productCategory">Category</label>
            <select class="form-control" id="productCategory" required>
              <option value="">Select Category</option>
              <option value="Shoes">Shoes</option>
              <option value="Clothing">Clothing</option>
              <option value="Accessories">Accessories</option>
              <option value="Sports Equipment">Sports Equipment</option>
            </select>
          </div>
          <div class="form-group">
            <label for="productPrice">Price</label>
            <input type="number" class="form-control" id="productPrice" step="0.01" required>
          </div>
          <div class="form-group">
            <label for="productStock">Initial Stock</label>
            <input type="number" class="form-control" id="productStock" required>
          </div>
          <div class="form-group">
            <label for="productDescription">Description</label>
            <textarea class="form-control" id="productDescription" rows="3"></textarea>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" onclick="saveProduct()">Save Product</button>
      </div>
    </div>
  </div>
</div>

<!-- Add Sale Modal -->
<div class="modal fade" id="addSaleModal" tabindex="-1">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">New Sale</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <form id="addSaleForm">
          <div class="form-group">
            <label for="saleProduct">Product</label>
            <select class="form-control" id="saleProduct" required>
              <option value="">Select Product</option>
              <% if (products && products.length > 0) { %>
                <% products.forEach(product => { %>
                  <option value="<%= product.id %>" data-price="<%= product.price %>">
                    <%= product.name %> - $<%= product.price.toFixed(2) %>
                  </option>
                <% }); %>
              <% } %>
            </select>
          </div>
          <div class="form-group">
            <label for="saleQuantity">Quantity</label>
            <input type="number" class="form-control" id="saleQuantity" required min="1">
          </div>
          <div class="form-group">
            <label for="saleTotal">Total Amount</label>
            <input type="number" class="form-control" id="saleTotal" readonly>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" onclick="saveSale()">Complete Sale</button>
      </div>
    </div>
  </div>
</div>

<!-- Update Stock Modal -->
<div class="modal fade" id="updateStockModal" tabindex="-1">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Update Stock</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <form id="updateStockForm">
          <div class="form-group">
            <label for="stockProduct">Product</label>
            <select class="form-control" id="stockProduct" required>
              <option value="">Select Product</option>
              <% if (products && products.length > 0) { %>
                <% products.forEach(product => { %>
                  <option value="<%= product.id %>" data-stock="<%= product.stock %>">
                    <%= product.name %> (Current Stock: <%= product.stock %>)
                  </option>
                <% }); %>
              <% } %>
            </select>
          </div>
          <div class="form-group">
            <label for="stockQuantity">New Stock Level</label>
            <input type="number" class="form-control" id="stockQuantity" required min="0">
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" onclick="updateStock()">Update Stock</button>
      </div>
    </div>
  </div>
</div>

<script>
// Initialize charts
const salesData = {
    labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],
    datasets: [{
        label: 'Sales',
        data: [65, 59, 80, 81, 56, 55, 40],
        fill: false,
        borderColor: 'rgb(75, 192, 192)',
        tension: 0.1
    }]
};

const categoryData = {
    labels: ['Shoes', 'Clothing', 'Accessories', 'Sports Equipment'],
    datasets: [{
        data: [30, 25, 15, 30],
        backgroundColor: [
            'rgb(255, 99, 132)',
            'rgb(54, 162, 235)',
            'rgb(255, 205, 86)',
            'rgb(75, 192, 192)'
        ]
    }]
};

const salesChart = new Chart(document.getElementById('salesChart'), {
    type: 'line',
    data: salesData,
    options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
            legend: {
                display: false
            }
        },
        scales: {
            y: {
                beginAtZero: true,
                grid: {
                    display: true,
                    drawBorder: false
                }
            },
            x: {
                grid: {
                    display: false
                }
            }
        }
    }
});

const categoryChart = new Chart(document.getElementById('categoryChart'), {
    type: 'doughnut',
    data: categoryData,
    options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
            legend: {
                position: 'bottom'
            }
        },
        cutout: '70%'
    }
});

// CRUD Operations
async function saveProduct() {
    const form = document.getElementById('addProductForm');
    const data = {
        name: document.getElementById('productName').value,
        category: document.getElementById('productCategory').value,
        price: document.getElementById('productPrice').value,
        stock: document.getElementById('productStock').value,
        description: document.getElementById('productDescription').value
    };

    try {
        const response = await fetch('/api/products', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        });

        if (response.ok) {
            location.reload();
        } else {
            alert('Error adding product');
        }
    } catch (error) {
        console.error('Error:', error);
        alert('Error adding product');
    }
}

async function editProduct(id) {
    // Implement edit product logic
}

async function deleteProduct(id) {
    if (confirm('Are you sure you want to delete this product?')) {
        try {
            const response = await fetch(`/api/products/${id}`, {
                method: 'DELETE'
            });

            if (response.ok) {
                location.reload();
            } else {
                alert('Error deleting product');
            }
        } catch (error) {
            console.error('Error:', error);
            alert('Error deleting product');
        }
    }
}

async function saveSale() {
    const form = document.getElementById('addSaleForm');
    const data = {
        product_id: document.getElementById('saleProduct').value,
        quantity: document.getElementById('saleQuantity').value,
        total_amount: document.getElementById('saleTotal').value
    };

    try {
        const response = await fetch('/api/sales', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        });

        if (response.ok) {
            location.reload();
        } else {
            alert('Error adding sale');
        }
    } catch (error) {
        console.error('Error:', error);
        alert('Error adding sale');
    }
}

async function updateStock() {
    const form = document.getElementById('updateStockForm');
    const data = {
        product_id: document.getElementById('stockProduct').value,
        quantity: document.getElementById('stockQuantity').value
    };

    try {
        const response = await fetch('/api/inventory', {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        });

        if (response.ok) {
            location.reload();
        } else {
            alert('Error updating stock');
        }
    } catch (error) {
        console.error('Error:', error);
        alert('Error updating stock');
    }
}

// Event Listeners
document.getElementById('saleProduct').addEventListener('change', function() {
    const quantity = document.getElementById('saleQuantity').value;
    const price = this.options[this.selectedIndex].dataset.price;
    document.getElementById('saleTotal').value = (quantity * price).toFixed(2);
});

document.getElementById('saleQuantity').addEventListener('input', function() {
    const product = document.getElementById('saleProduct');
    const price = product.options[product.selectedIndex].dataset.price;
    document.getElementById('saleTotal').value = (this.value * price).toFixed(2);
});

// Chart period buttons
document.querySelectorAll('.chart-period').forEach(button => {
    button.addEventListener('click', function() {
        document.querySelectorAll('.chart-period').forEach(btn => btn.classList.remove('active'));
        this.classList.add('active');
        // Add logic to update chart data based on selected period
    });
});

// Refresh button
document.querySelector('.refresh-btn').addEventListener('click', function() {
    this.classList.add('spinning');
    location.reload();
});

function generateReport() {
    // Implement report generation logic
    alert('Generating report...');
}
</script>

<%- include('partials/footer') %>
